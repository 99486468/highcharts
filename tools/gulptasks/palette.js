/*
 * Copyright (C) Highsoft AS
 */

const gulp = require('gulp');
const log = require('./lib/log');

/**
 * Create the palette module file based on highcharts.scss
 *
 * @return {Promise<void>}
 *         Promise to keep
 */
async function task() {
    const fs = require('fs');
    const path = require('path');
    const lines = fs.readFileSync(
        path.join(__dirname, '../../css/highcharts.scss'), 'utf8'
    );
    const palette = lines.split('\n').reduce((obj, line) => {
        let parts;
        let key;
        let val;
        if (line.indexOf('$') === 0) {
            parts = line
                .replace(' !default', '')
                .replace(/\r/, '').split(':');
            key = parts[0].trim().replace(/^\$/, '')
                // Camelcase
                .replace(/-([a-z0-9])/g, g => g[1].toUpperCase());
            val = parts[1].split(';')[0].trim();

            // Single color
            if (val.lastIndexOf('#') === 0) {
                obj[key] = val;

            // Array of colors
            } else if (val.lastIndexOf('#') > 0) {
                obj[key] = val.split(' ');
            }
        }
        return obj;
    }, {});

    const json = JSON.stringify(palette, null, '    ')
        // Quoted hex colors
        .replace(/"#([a-f0-9]{6})"/g, '\'#$1\'')
        // Keys
        .replace(/"/g, '');


    const tpl =
`/**
 * Palette for Highcharts. Do not edit this file! This file is generated using
 * the 'gulp palette' task. Palette colors are defined in highcharts.scss.
 */
const palette = ${json};
export default palette;
`;
    const tsFilePath = path.join(__dirname, '../../ts/core/Palette.ts');
    fs.writeFileSync(tsFilePath, tpl, 'utf8');

    log.success(`Wrote palette colors to ${tsFilePath}`);

}

gulp.task('palette', task);
